; __u32 cpu = bpf_get_smp_processor_id();
155: (85) call bpf_get_smp_processor_id#8     ; R0=scalar(umax=63,var_off=(0x0; 0x3f))
156: (bf) r1 = r0                     ; R0=scalar(id=7,umax=63,var_off=(0x0; 0x3f)) R1_w=scalar(id=7,umax=63,var_off=(0x0; 0x3f))
157: (67) r1 <<= 32                   ; R1_w=scalar(umax=270582939648,var_off=(0x0; 0x3f00000000),s32_max=0,u32_max=0)
158: (77) r1 >>= 32                   ; R1_w=scalar(umax=63,var_off=(0x0; 0x3f))
; if (unlikely(cpu >= MAX_CPU)) {
159: (25) if r1 > 0x13 goto pc+186    ; R1_w=scalar(umax=19,var_off=(0x0; 0x1f))
; return ack_prod[cpu] == ack_cons[cpu];
160: (67) r0 <<= 2                    ; R0_w=scalar(umax=252,var_off=(0x0; 0xfc))
161: (18) r1 = 0x3fffffffc            ; R1_w=17179869180
163: (5f) r0 &= r1                    ; R0_w=scalar(umax=252,var_off=(0x0; 0xfc)) R1_w=17179869180
164: (18) r1 = 0xffffa37a005a0000     ; R1_w=map_value(off=0,ks=4,vs=80,imm=0)
166: (0f) r1 += r0                    ; R0_w=scalar(umax=252,var_off=(0x0; 0xfc)) R1_w=map_value(off=0,ks=4,vs=80,umax=252,var_off=(0x0; 0xfc))
; return ack_prod[cpu] == ack_cons[cpu];
167: (18) r2 = 0xffffa37a005a3000     ; R2_w=map_value(off=0,ks=4,vs=80,imm=0)
169: (0f) r2 += r0                    ; R0_w=scalar(umax=252,var_off=(0x0; 0xfc)) R2_w=map_value(off=0,ks=4,vs=80,umax=252,var_off=(0x0; 0xfc))
170: (61) r2 = *(u32 *)(r2 +0)
invalid access to map value, value_size=80 off=252 size=4
R2 max value is outside of the allowed memory range
processed 154 insns (limit 1000000) max_states_per_insn 0 total_states 8 peak_states 8 mark_read 5
-- END PROG LOAD LOG --
libbpf: prog 'xdp_gen_prog': failed to load: -13
libbpf: failed to load object 'eBPF/tcp/main.o'
ERROR: loading BPF object file failed (-13): Permission denied
ERROR: etran_tcp->load_ebpf_programs() failed (-13): Permission denied
Micro kernel exit.
