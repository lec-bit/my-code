
int is_own_mac(struct pbuf *p, struct netif *inp) {
  if (SYS_CONFIG(flow_bifurcation) == 1 && SYS_CONFIG(bond6_switch) == 1) {
    pbuf_add_header(p, IP6_HLEN+SIZEOF_ETH_HDR);
    struct eth_hdr *ethhdr = (struct eth_hdr *)p->payload;
    struct netif *current_netif;

    LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_TRACE,
            ("src mac:%"X8_F":%"X8_F":%"X8_F":%"X8_F":%"X8_F":%"X8_F"\n",
            (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  
            (unsigned char)ethhdr->src.addr[2],  (unsigned char)ethhdr->src.addr[3],
            (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5]));

    for (current_netif = inp; current_netif != NULL; current_netif = current_netif->next) {
        if (current_netif->hwaddr_len > 0) {
            LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_TRACE,
                  ("current_netif mac: %02X:%02X:%02X:%02X:%02X:%02X\n",
                   current_netif->hwaddr[0], current_netif->hwaddr[1],
                   current_netif->hwaddr[2], current_netif->hwaddr[3],
                   current_netif->hwaddr[4], current_netif->hwaddr[5]));

            if (current_netif->hwaddr[0] == ethhdr->src.addr[0] 
                && current_netif->hwaddr[1] == ethhdr->src.addr[1]
                && current_netif->hwaddr[2] == ethhdr->src.addr[2] 
                && current_netif->hwaddr[3] == ethhdr->src.addr[3]
                && current_netif->hwaddr[4] == ethhdr->src.addr[4] 
                && current_netif->hwaddr[5] == ethhdr->src.addr[5]) {
                  pbuf_remove_header(p, IP6_HLEN+SIZEOF_ETH_HDR);
                  LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_TRACE,("src mac is equal netif mac, message is from myself\n"));
                  return 1;
            }
        }
    }

    pbuf_remove_header(p, IP6_HLEN+SIZEOF_ETH_HDR);
  } 
  return 0;
}
