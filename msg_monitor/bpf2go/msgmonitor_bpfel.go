// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package bpf2go

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// LoadMsgMonitor returns the embedded CollectionSpec for MsgMonitor.
func LoadMsgMonitor() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_MsgMonitorBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load MsgMonitor: %w", err)
	}

	return spec, err
}

// LoadMsgMonitorObjects loads MsgMonitor and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*MsgMonitorObjects
//	*MsgMonitorPrograms
//	*MsgMonitorMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadMsgMonitorObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadMsgMonitor()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// MsgMonitorSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type MsgMonitorSpecs struct {
	MsgMonitorProgramSpecs
	MsgMonitorMapSpecs
	MsgMonitorVariableSpecs
}

// MsgMonitorProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type MsgMonitorProgramSpecs struct {
	BpfTcpRecvmsg *ebpf.ProgramSpec `ebpf:"bpf_tcp_recvmsg"`
	BpfTcpSendmsg *ebpf.ProgramSpec `ebpf:"bpf_tcp_sendmsg"`
}

// MsgMonitorMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type MsgMonitorMapSpecs struct {
	MapOfHttpProbe *ebpf.MapSpec `ebpf:"map_of_http_probe"`
}

// MsgMonitorVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type MsgMonitorVariableSpecs struct {
}

// MsgMonitorObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadMsgMonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type MsgMonitorObjects struct {
	MsgMonitorPrograms
	MsgMonitorMaps
	MsgMonitorVariables
}

func (o *MsgMonitorObjects) Close() error {
	return _MsgMonitorClose(
		&o.MsgMonitorPrograms,
		&o.MsgMonitorMaps,
	)
}

// MsgMonitorMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadMsgMonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type MsgMonitorMaps struct {
	MapOfHttpProbe *ebpf.Map `ebpf:"map_of_http_probe"`
}

func (m *MsgMonitorMaps) Close() error {
	return _MsgMonitorClose(
		m.MapOfHttpProbe,
	)
}

// MsgMonitorVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadMsgMonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type MsgMonitorVariables struct {
}

// MsgMonitorPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadMsgMonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type MsgMonitorPrograms struct {
	BpfTcpRecvmsg *ebpf.Program `ebpf:"bpf_tcp_recvmsg"`
	BpfTcpSendmsg *ebpf.Program `ebpf:"bpf_tcp_sendmsg"`
}

func (p *MsgMonitorPrograms) Close() error {
	return _MsgMonitorClose(
		p.BpfTcpRecvmsg,
		p.BpfTcpSendmsg,
	)
}

func _MsgMonitorClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed msgmonitor_bpfel.o
var _MsgMonitorBytes []byte
